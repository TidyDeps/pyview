        {/* ÏÑ†ÌÉùÎêú ÎÖ∏Îìú ÏÉÅÏÑ∏ Ï†ïÎ≥¥ */}
        {selectedNode && (() => {
          const nodeInfo = hierarchicalData.nodes.find(n => n.id === selectedNode);
          const nodeEdges = hierarchicalData.edges.filter(e => 
            e.source === selectedNode || e.target === selectedNode
          );
          const incoming = nodeEdges.filter(e => e.target === selectedNode);
          const outgoing = nodeEdges.filter(e => e.source === selectedNode);
          
          return (
            <div style={{ 
              marginTop: 12, 
              padding: 12, 
              backgroundColor: '#f8f9fa', 
              borderRadius: 6,
              border: '1px solid #d9d9d9'
            }}>
              <div style={{ fontSize: 13, fontWeight: 600, marginBottom: 8, color: '#1890ff' }}>
                üìã Selected Node Details
              </div>
              
              {nodeInfo ? (
                <div style={{ fontSize: 11, lineHeight: 1.4 }}>
                  {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
                  <div style={{ marginBottom: 6 }}>
                    <div><strong>Name:</strong> {nodeInfo.name}</div>
                    <div><strong>Type:</strong> 
                      <Tag color={
                        nodeInfo.type === 'package' ? 'green' :
                        nodeInfo.type === 'module' ? 'blue' :
                        nodeInfo.type === 'class' ? 'orange' :
                        nodeInfo.type === 'method' ? 'purple' :
                        nodeInfo.type === 'field' ? 'cyan' : 'default'
                      } style={{ marginLeft: 4, fontSize: 10 }}>
                        {nodeInfo.type.toUpperCase()}
                      </Tag>
                    </div>
                    <div><strong>Level:</strong> {nodeInfo.level}</div>
                    {nodeInfo.parent && (
                      <div><strong>Parent:</strong> {nodeInfo.parent}</div>
                    )}
                  </div>
                  
                  {/* ÏùòÏ°¥ÏÑ± Ï†ïÎ≥¥ */}
                  {(incoming.length > 0 || outgoing.length > 0) && (
                    <div style={{ marginTop: 8, paddingTop: 6, borderTop: '1px solid #e0e0e0' }}>
                      <div style={{ fontWeight: 500, marginBottom: 4 }}>üîó Dependencies:</div>
                      
                      {incoming.length > 0 && (
                        <div style={{ marginBottom: 3 }}>
                          <span style={{ fontSize: 10, color: '#52c41a' }}>‚Üê Incoming ({incoming.length}):</span>
                          <div style={{ marginLeft: 8, fontSize: 10, color: '#666' }}>
                            {incoming.slice(0, 3).map(e => (
                              <div key={e.source}>{e.source}</div>
                            ))}
                            {incoming.length > 3 && <div>... and {incoming.length - 3} more</div>}
                          </div>
                        </div>
                      )}
                      
                      {outgoing.length > 0 && (
                        <div>
                          <span style={{ fontSize: 10, color: '#1890ff' }}>‚Üí Outgoing ({outgoing.length}):</span>
                          <div style={{ marginLeft: 8, fontSize: 10, color: '#666' }}>
                            {outgoing.slice(0, 3).map(e => (
                              <div key={e.target}>{e.target}</div>
                            ))}
                            {outgoing.length > 3 && <div>... and {outgoing.length - 3} more</div>}
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                  
                  {/* ÏûêÏãù ÎÖ∏Îìú Ï†ïÎ≥¥ */}
                  {nodeInfo.children && nodeInfo.children.length > 0 && (
                    <div style={{ marginTop: 8, paddingTop: 6, borderTop: '1px solid #e0e0e0' }}>
                      <div style={{ fontWeight: 500, marginBottom: 4 }}>üë∂ Children ({nodeInfo.children.length}):</div>
                      <div style={{ fontSize: 10, color: '#666' }}>
                        {nodeInfo.children.slice(0, 5).map(childId => (
                          <div key={childId}>{childId}</div>
                        ))}
                        {nodeInfo.children.length > 5 && (
                          <div>... and {nodeInfo.children.length - 5} more</div>
                        )}
                      </div>
                    </div>
                  )}
                  
                  {/* Ï∂îÍ∞Ä Î©îÌä∏Î¶≠ */}
                  <div style={{ marginTop: 8, paddingTop: 6, borderTop: '1px solid #e0e0e0', fontSize: 10, color: '#999' }}>
                    <div>Total Expanded: {expandedNodes.size} nodes</div>
                    <div>Node ID: {selectedNode}</div>
                  </div>
                </div>
              ) : (
                <div style={{ fontSize: 11, color: '#999' }}>
                  Node information not available
                </div>
              )}
            </div>
          );
        })()}
